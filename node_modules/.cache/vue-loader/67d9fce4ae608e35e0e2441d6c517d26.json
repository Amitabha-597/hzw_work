{"remainingRequest":"F:\\Project325\\huizhan\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\Project325\\huizhan\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\Project325\\huizhan\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Project325\\huizhan\\src\\views\\MyComponents\\Myposter.vue?vue&type=template&id=2ced9edc&scoped=true&","dependencies":[{"path":"F:\\Project325\\huizhan\\src\\views\\MyComponents\\Myposter.vue","mtime":1590577165880},{"path":"F:\\Project325\\huizhan\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589867250303},{"path":"F:\\Project325\\huizhan\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1589867259014},{"path":"F:\\Project325\\huizhan\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1589867250303},{"path":"F:\\Project325\\huizhan\\node_modules\\vue-loader\\lib\\index.js","mtime":1589867259014}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}